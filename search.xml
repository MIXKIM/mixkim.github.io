<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Core Java Volume One</title>
    <url>/2020/07/24/CoreJava11thNoteBookVolumeOne/</url>
    <content><![CDATA[<p>人真是单纯，一旦知道有回报，就会去努力。努力若有成果，就会加倍努力。</p>
<a id="more"></a>

<h1 id="Chapter-3"><a href="#Chapter-3" class="headerlink" title="Chapter 3"></a>Chapter 3</h1><h2 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h2><p>Java编程语言区分大小写，java文件的文件名必须与类名相同且首字母必须大写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>内置类型的首字母应该小写，否则将使用预定义的类。如double的大写是指的内置类型java.lang.Double</p>
<p>Java程序设计语言中内置8种基本数据类型：4种整型，2种浮点类型，1种字符类型，1种表示真值</p>
<h3 id="整型-Integer"><a href="#整型-Integer" class="headerlink" title="整型[Integer]"></a>整型[Integer]</h3><ul>
<li>short         2字节</li>
<li>int         4字节</li>
<li>long        8字节  </li>
<li>byte        1字节</li>
</ul>
<p>注意长整型[L]、十六进制[0x]、八进制[0]、二进制[0b]的字面值表示方法</p>
<p>Java由于JVM的关系，基本类型所占字节数与平台类型无关</p>
<p>Java没有提供unsigned类型，但提供了ToUnsignedInt()等方法，可以将基本类型直接转换为无符号类型</p>
<h3 id="浮点类型-Float"><a href="#浮点类型-Float" class="headerlink" title="浮点类型[Float]"></a>浮点类型[Float]</h3><ul>
<li>float     4字节(6~7位)</li>
<li>double    8字节(15位)</li>
</ul>
<p>单精度浮点数后面加F或f，默认双精度浮点数</p>
<p>在十六进制中，科学计数法使用p而不是e，而指数依旧使用十进制表示</p>
<p>三种异常的浮点数：Double.POSITIVE_INFINITY[正无穷]、Double.NEGATIVE_INFINITY[负无穷]、Double.NaN[非数字] </p>
<p>判断是否为数 不能直接与Double.NaN比较 所有非数值的值都是不同的 可以使用 Double.isNaN() 方法</p>
<h3 id="字符类型-Charater"><a href="#字符类型-Charater" class="headerlink" title="字符类型[Charater]"></a>字符类型[Charater]</h3><ul>
<li>char      4字节     </li>
</ul>
<p>char类型表意单个字符，每个字符理论上只需要2字节，但由于Unicode字符数目变多，在Java5之后引入码点解决字符长度不足的问题，导致部分Unicode字符需要两个char类型表示,所以是四个字节</p>
<p>由于Unicode转义字符会在解析代码前进行，在注释以及字符串中要注意\u的出现会导致字符错误</p>
<h3 id="真值类型-Boolean"><a href="#真值类型-Boolean" class="headerlink" title="真值类型[Boolean]"></a>真值类型[Boolean]</h3><ul>
<li>boolean     False/True</li>
</ul>
<p>与C/C++不同,Java中不能用0与非0代替True以及False,即整数以及Boolean值不能相互转换</p>
<h2 id="变量简介"><a href="#变量简介" class="headerlink" title="变量简介"></a>变量简介</h2><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>Java中不区分定义与声明，也不要求定义位置，按照随用随定义的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vacationDay;</span><br><span class="line"><span class="keyword">int</span> workDay = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>Java11及以后引入var，使得编译器可以自行判断局部变量的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vacationWeeks = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>变量的命名不能以数字开头，不能使用保留字，使用驼峰命名法，长度不限，可以使用中文</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量使用final字段，一般使用全大写以及下划线命名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> CM_PER_INCH = <span class="number">2.54</span>;</span><br></pre></td></tr></table></figure>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>当变量取值在某个范围内时 可以使用枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Size&#123;</span><br><span class="line">    SMALL, MEDIUM, LARGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul>
<li><p>单目算术运算符：+    -     /     %     *</p>
</li>
<li><p>双目算术运算符：+=     -=     /=     *=     %= ++ –</p>
</li>
</ul>
<p>自增自减运算符从右往左计算，++a先执行a+1再将a带入表达式，a++是先将a带入计算，再执行a+1</p>
<p>在除法运算中，浮点型与整型转换时，小数后面的部分将会被直接去掉</p>
<p>而在部分Intel的处理器中有80位的浮点寄存器，中间有部分截断不按照64位计算。如果需要得到相同的计算结果，使用strictfp关键字进行严格的截断计算，但是会损失性能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">strictfp</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于取模-以及取余-mod"><a href="#关于取模-以及取余-mod" class="headerlink" title="关于取模(%)以及取余(mod)"></a>关于取模(%)以及取余(mod)</h3><h2 id="数学类-Math"><a href="#数学类-Math" class="headerlink" title="数学类[Math]"></a>数学类[Math]</h2><h3 id="计算函数"><a href="#计算函数" class="headerlink" title="计算函数"></a>计算函数</h3><ul>
<li><p>开方运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>幂运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> <span class="comment">// a ^ b</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><ul>
<li> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sin</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">// 计算正弦(使用弧度制)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">cos</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">// 计算余弦(使用弧度制)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">tan</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">// 计算正切(使用弧度制)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">atan</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">// 计算反正切(使用弧度制)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">atan2</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> <span class="comment">// 计算反正切 使用直角坐标</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">toRadians</span><span class="params">(<span class="keyword">double</span> angdeg)</span> <span class="comment">// 将角度转换为弧度</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h3><ul>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">exp</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">// 返回 e^a 的值</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">log</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">// 返回 lna 的值</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">log10</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">// 返回 lga 的值</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="常量-1"><a href="#常量-1" class="headerlink" title="常量"></a>常量</h3><ul>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> E</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><pre class="mermaid">graph LR
  id5(char) --> id3(int)
  id1(byte) --> id2(short)
  id2(short) --> id3(int)
  id3(int) --> id4(long)
  id3(int) --> id6(double)
  id7(float) --> id6(double)
  id3(int) -.-> id7(float)
  id4(long) -.-> id6(double)
  id4(long) -.-> id7(float)</pre>
<p>实线代表无精度损失</p>
<p>虚线代表有精度损失</p>
<blockquote>
<p>运算逻辑:<br>二元运算符计算时应当先将两者转换为相同的类型再进行运算<br>如果其中有一个为double，则另一个会被转换为double<br>否则若其中有一个为float，则另一个会被转换为float<br>否则若其中有一个为long，则另一个会被转换为long<br>如果上述过程都不符合则都会被转换为int类型</p>
</blockquote>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>如果在类型转换中将会发生截断，则必须显示表达出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> ADouble = <span class="number">9.7</span>;</span><br><span class="line"><span class="keyword">int</span> ANum2 = (<span class="keyword">int</span>)ADouble;</span><br><span class="line"><span class="keyword">int</span> ANum3 = (<span class="keyword">int</span>)Math.round(ADouble);</span><br><span class="line">System.out.println(ANum2);  <span class="comment">// 9</span></span><br><span class="line">System.out.println(ANum3);  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>其中Math.round为四舍五入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">float</span> a)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul>
<li><p>比较运算：==（相等） !=（不相等） &gt;（大于） &gt;=（大于等于） &lt;（小于） &lt;=（小于等于） </p>
</li>
<li><p>逻辑运算：||（或） &amp;&amp;（与） !（非）</p>
<ul>
<li>逻辑运算采取短路计算的方法，即计算前面的式子时如果可以得出逻辑运算的结果，后面的式子将会被跳过，可以利用短路的性质跳过可能出错的地方<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ANum4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ANum4 != <span class="number">0</span> &amp;&amp; <span class="number">1</span> / ANum4 &gt; ANum4 + ANum3) &#123;     <span class="comment">// 利用短路性质 避免计算1/0出错</span></span><br><span class="line">System.out.println(<span class="number">1</span> / ANum4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>三目运算符：condition ? expression1 : expersion2; 条件成立执行表达式一，条件不成立执行表达式二</p>
</li>
</ul>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul>
<li><p>逻辑运算：&amp;（与） |（或） ^（异或） ~（非）</p>
<blockquote>
<p>在布尔运算中，| &amp; 和 &amp;&amp; || 的计算逻辑相同，但前者不采取短路计算</p>
</blockquote>
</li>
<li><p>位移运算符：&lt;&lt;（左移） &gt;&gt;（右移高位填充符号位） &gt;&gt;&gt;（右移高位填零）</p>
<blockquote>
<p>右操作数可以模32（long型模64）结果相同 Eg. 1 &lt;&lt; 35 等价于 1 &lt;&lt; 3</p>
</blockquote>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Java中采取的是Unicode字符集</p>
<p>而在Java中字符串并不是基本类型，而是作为一个预定义类（String）在Java标准库中提供，其中由””括起来的都是这个类的实例</p>
<p>Java中的字符串从零开始计数</p>
<ul>
<li><p>获得字串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>拼接字串，在Java中+操作符可以拼接两个字串，同时也可以将非字符串值转换为字符串，利用任意Java对象中都提供的toString()方法</p>
</li>
<li><p>使用界定符分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">join</span><span class="params">(CharSequence delimiter, ChatSequence... elements)</span> <span class="comment">// delimiter是分界符</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">join</span><span class="params">(CharSequence delimiter, Iterable&lt;? extends CharSequence&gt; elements)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重复字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">repeat</span><span class="params">(<span class="keyword">int</span> count)</span> <span class="comment">// count重复次数</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>与C++不同Java中的字符串并不是字符数组，即不可以修改字符串中的某个字符</p>
<p>Java中的字符串更加类似于C++中的String*，Java的字符串是共享的，储存在堆中，属于公共区域</p>
<ul>
<li><p>判断字符串是否相同<br>判断字符串是否相同不能使用==，==仅能判断字符串所处的位置空间是否相同，应该使用equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span> <span class="comment">// 忽略大小写</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获得</p>
</li>
</ul>
<h3 id="关于Java的编码"><a href="#关于Java的编码" class="headerlink" title="关于Java的编码"></a>关于Java的编码</h3><p>空串是长度为0，内容为空</p>
<p>Null串，不指向任何对象</p>
<p>有关于<a href="https://blog.csdn.net/ldanduo/article/details/8203532/" target="_blank" rel="noopener">编码</a>的内容，有关于<a href="https://blog.csdn.net/qq_22771739/article/details/84261165" target="_blank" rel="noopener">码点</a>的内容</p>
<p>Java使用UTF-16的传输方式表示Unicode编码，但由于部分UTF-16传输方式无法使用一个代码单元表示，所以有部分码字需要两个代码单元表示</p>
<ul>
<li><p>代码单元的数目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="comment">// 返回代码单元的数目</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>码点的数目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointCount</span><span class="params">(<span class="keyword">int</span> beforeIndex, <span class="keyword">int</span> endIndex)</span> <span class="comment">// 返回码点的数目</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获得特定代码单元的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 返回特定位置的代码单元</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获得特定码点的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">codePointAt</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 返回特定位置的码点</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在Java14的文档中codePoint有关的方法全部变成静态方法，并且字符串由参数列表导入，但在jdk14下使用有问题</p>
<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>由于Java中的String类形如C++中的String*，则在使用较短字符拼接成字符串时效率较低且浪费空间，此时可以使用StringBuilder类构建字符串</p>
<ul>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(Object obj)</span> <span class="comment">// 拼接字符串（几乎支持所有类型）</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用继承自Object的toString方法得到拼接以后的字符串</p>
</li>
</ul>
<h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="标准输入流"><a href="#标准输入流" class="headerlink" title="标准输入流"></a>标准输入流</h3><ul>
<li><p>读取输入，使用Scanner对象，扫描标准输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用next*()方法读取标准输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> <span class="comment">// 终止于空白符</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span>  <span class="comment">// 读取下一行，以换行符为界</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span>  <span class="comment">// 读取下一个整数</span></span></span><br><span class="line"><span class="function">  ···</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="关于非明文输入Console类"><a href="#关于非明文输入Console类" class="headerlink" title="关于非明文输入Console类"></a>关于非明文输入Console类</h4><p>java.io.Console类，该类必须在cli中运行，其中对于密码的输入不可见</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Console cons = System.console();</span><br><span class="line">String username = cons.readLine(<span class="string">"Username : "</span>); <span class="comment">// 读取用户名，可见</span></span><br><span class="line"><span class="keyword">char</span>[] passwd = cons.readPassword(<span class="string">"Password : "</span>); <span class="comment">// 读取密码，不可见</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaNote</tag>
      </tags>
  </entry>
  <entry>
    <title>霓虹语</title>
    <url>/2020/07/27/%E9%9C%93%E8%99%B9%E8%AF%AD/</url>
    <content><![CDATA[<p>如果能努力的话，就去努力吧。</p>
<p>能前进的话就要一直向前。</p>
<a id="more"></a>

<h1 id="あ行"><a href="#あ行" class="headerlink" title="あ行"></a>あ行</h1><p>あ        い　    う　    え　     お</p>
<p>ア        イ　    ウ　    エ　   オ</p>
<p>a           i          u         e          o</p>
<h1 id="声调-高低型"><a href="#声调-高低型" class="headerlink" title="声调(高低型)"></a>声调(高低型)</h1><ul>
<li><p>数字表记法 ：最后一个高读音节①</p>
</li>
<li><p>横线表记法：横线高音 竖线下降</p>
</li>
<li><p>规则：</p>
<ul>
<li>第一个音节和第二个音节高低相反</li>
<li>一个单词只有一个下降或者没有下降<ul>
<li>平板型：一低二高一直高，助词也高</li>
<li>头高型：一高二低一直低，助词也低</li>
<li>中高型：两头低中间高，助词低</li>
<li>尾高型：一低二高一直高，助词低</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="か行"><a href="#か行" class="headerlink" title="か行"></a>か行</h1><p>か　き　く    け    こ</p>
<p>カ　キ    ク    ケ    コ</p>
<p>ka    ki    ku    ke    ko</p>
<h1 id="さ行"><a href="#さ行" class="headerlink" title="さ行"></a>さ行</h1><p>さ　　し　　す　　せ　　そ</p>
<p>サ　　シ　　ス　　　セ　　ソ</p>
<p>sa 　　shi 　su　　 se 　　so</p>
]]></content>
      <tags>
        <tag>霓虹语笔记</tag>
      </tags>
  </entry>
</search>
